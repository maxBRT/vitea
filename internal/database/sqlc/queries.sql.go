// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_token (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING user_id, token, expires_at
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}

const createResume = `-- name: CreateResume :one
INSERT INTO resumes (s3_key, user_id)
VALUES ($1, $2)
RETURNING id, user_id, s3_key, created_at, updated_at
`

type CreateResumeParams struct {
	S3Key  string    `json:"s3_key"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateResume(ctx context.Context, arg CreateResumeParams) (Resume, error) {
	row := q.db.QueryRowContext(ctx, createResume, arg.S3Key, arg.UserID)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, first_name, last_name, email, hashed_password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, first_name, last_name, email, hashed_password, created_at, updated_at, verified
`

type CreateUserParams struct {
	ID             uuid.UUID `json:"id"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
	)
	return i, err
}

const createVerifyLink = `-- name: CreateVerifyLink :exec

INSERT INTO user_verify_link (user_id, token, expires_at)
VALUES ($1, $2, $3)
`

type CreateVerifyLinkParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

// ============================================
// User Verification Link Queries
// ============================================
func (q *Queries) CreateVerifyLink(ctx context.Context, arg CreateVerifyLinkParams) error {
	_, err := q.db.ExecContext(ctx, createVerifyLink, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_token
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_token
WHERE user_id = $1
`

type DeleteRefreshTokenParams struct {
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteRefreshToken(ctx context.Context, arg DeleteRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, arg.UserID)
	return err
}

const deleteRefreshTokenByToken = `-- name: DeleteRefreshTokenByToken :exec
DELETE FROM refresh_token
WHERE token = $1
`

type DeleteRefreshTokenByTokenParams struct {
	Token string `json:"token"`
}

func (q *Queries) DeleteRefreshTokenByToken(ctx context.Context, arg DeleteRefreshTokenByTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByToken, arg.Token)
	return err
}

const deleteResume = `-- name: DeleteResume :exec
DELETE FROM resumes
WHERE id = $1
`

type DeleteResumeParams struct {
	ID int32 `json:"id"`
}

func (q *Queries) DeleteResume(ctx context.Context, arg DeleteResumeParams) error {
	_, err := q.db.ExecContext(ctx, deleteResume, arg.ID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

type DeleteUserParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID)
	return err
}

const deleteVerifyLink = `-- name: DeleteVerifyLink :exec
DELETE FROM user_verify_link
WHERE user_id = $1
`

type DeleteVerifyLinkParams struct {
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteVerifyLink(ctx context.Context, arg DeleteVerifyLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteVerifyLink, arg.UserID)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one

SELECT id, first_name, last_name, email, hashed_password, created_at, updated_at, verified FROM users
WHERE email = $1
`

type FindUserByEmailParams struct {
	Email string `json:"email"`
}

// ============================================
// User Queries
// ============================================
func (q *Queries) FindUserByEmail(ctx context.Context, arg FindUserByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
	)
	return i, err
}

const getAllResumes = `-- name: GetAllResumes :many
SELECT id, user_id, s3_key, created_at, updated_at FROM resumes
ORDER BY created_at DESC
`

func (q *Queries) GetAllResumes(ctx context.Context) ([]Resume, error) {
	rows, err := q.db.QueryContext(ctx, getAllResumes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resume{}
	for rows.Next() {
		var i Resume
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.S3Key,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, email, hashed_password, created_at, updated_at, verified FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.HashedPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one

SELECT user_id, token, expires_at FROM refresh_token
WHERE token = $1
`

type GetRefreshTokenByTokenParams struct {
	Token string `json:"token"`
}

// ============================================
// Refresh Token Queries
// ============================================
func (q *Queries) GetRefreshTokenByToken(ctx context.Context, arg GetRefreshTokenByTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, arg.Token)
	var i RefreshToken
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}

const getRefreshTokenByUserID = `-- name: GetRefreshTokenByUserID :one
SELECT user_id, token, expires_at FROM refresh_token
WHERE user_id = $1
`

type GetRefreshTokenByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetRefreshTokenByUserID(ctx context.Context, arg GetRefreshTokenByUserIDParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserID, arg.UserID)
	var i RefreshToken
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}

const getResume = `-- name: GetResume :one

SELECT id, user_id, s3_key, created_at, updated_at FROM resumes
WHERE id = $1
`

type GetResumeParams struct {
	ID int32 `json:"id"`
}

// ============================================
// Resume Queries
// ============================================
func (q *Queries) GetResume(ctx context.Context, arg GetResumeParams) (Resume, error) {
	row := q.db.QueryRowContext(ctx, getResume, arg.ID)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResumesByUserID = `-- name: GetResumesByUserID :many
SELECT id, user_id, s3_key, created_at, updated_at FROM resumes
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetResumesByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetResumesByUserID(ctx context.Context, arg GetResumesByUserIDParams) ([]Resume, error) {
	rows, err := q.db.QueryContext(ctx, getResumesByUserID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resume{}
	for rows.Next() {
		var i Resume
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.S3Key,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, hashed_password, created_at, updated_at, verified FROM users
WHERE id = $1
`

type GetUserParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
	)
	return i, err
}

const getVerifyLinkByToken = `-- name: GetVerifyLinkByToken :one
SELECT user_id, token, expires_at FROM user_verify_link
WHERE token = $1 AND expires_at > NOW()
`

type GetVerifyLinkByTokenParams struct {
	Token string `json:"token"`
}

func (q *Queries) GetVerifyLinkByToken(ctx context.Context, arg GetVerifyLinkByTokenParams) (UserVerifyLink, error) {
	row := q.db.QueryRowContext(ctx, getVerifyLinkByToken, arg.Token)
	var i UserVerifyLink
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}

const getVerifyLinkByUserID = `-- name: GetVerifyLinkByUserID :one
SELECT user_id, token, expires_at FROM user_verify_link
WHERE user_id = $1
`

type GetVerifyLinkByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetVerifyLinkByUserID(ctx context.Context, arg GetVerifyLinkByUserIDParams) (UserVerifyLink, error) {
	row := q.db.QueryRowContext(ctx, getVerifyLinkByUserID, arg.UserID)
	var i UserVerifyLink
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}

const updateResume = `-- name: UpdateResume :exec
UPDATE resumes
SET s3_key = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateResumeParams struct {
	ID    int32  `json:"id"`
	S3Key string `json:"s3_key"`
}

func (q *Queries) UpdateResume(ctx context.Context, arg UpdateResumeParams) error {
	_, err := q.db.ExecContext(ctx, updateResume, arg.ID, arg.S3Key)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET first_name = $2,
    last_name = $3,
    email = $4,
    hashed_password = $5,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID `json:"id"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
	)
	return err
}

const verifyUser = `-- name: VerifyUser :execrows
UPDATE users
SET verified = TRUE,
    updated_at = NOW()
WHERE id = $1
`

type VerifyUserParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, verifyUser, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
